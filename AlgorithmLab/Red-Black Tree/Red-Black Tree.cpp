#include <stdlib.h>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <time.h>
#include "xtree.h"

#include<map>

const int test_number = 100000;
int arr[test_number]
=
{
	18075,23234,21157,31144,5518,6203,12682,21582,26590,8647,7596,22225,26581,30367,24373,5956,18318,25465,9935,32570,6050,3746,14695,22651,28933,2637,2353,4603,30250,24875,24557,20748,28526,20795,32360,8914,1715,10468,21829,25079,26187,31297,15101,9377,16153,6332,17189,18081,31218,5342,6896,25582,6217,
	10853,3828,22353,2060,21655,7729,4449,28361,31959,15951,23474,12309,30582,13607,23626,13102,17099,11141,27988,11231,15494,23852,7449,27300,16705,2587,27179,30735,27224,3343,4067,32618,24059,15177,30478,19614,25985,29073,7908,24916,15871,29307,4666,25945,22298,31209,15608,30279,29721,10705,13772,6754,
	25407,13377,20512,23232,16215,26272,2634,18605,28560,31286,11267,29261,22923,19951,10523,2691,31155,27995,7275,18450,21965,2298,28426,16386,32207,17335,32708,16198,3830,31154,24263,26523,27923,25666,29088,5043,9766,16187,4966,18067,13357,21356,1333,10810,4414,2668,17118,24963,20948,28567,4061,12620,
	14695,16979,20620,17624,32063,32152,918,4466,10633,30895,28589,7507,23723,1337,22912,11718,19669,11892,21991,8330,19416,32186,3169,29816,15676,26698,32193,17765,12940,19019,8996,16202,8693,4878,31014,19619,27408,1684,19286,1044,7675,14416,21479,6482,14510,9005,936,21825,20108,723,1590,22874,20025,21030,
	22127,12880,22956,4880,30507,32243,25733,17281,9255,10324,3232,9140,3906,1066,24810,12723,32236,17012,2675,32285,23259,3424,3013,15911,4095,19052,2677,16097,15545,18379,22263,7611,7240,22794,9910,27207,12420,9971,13412,5440,1230,14002,14991,20684,7495,27702,31862,17918,26176,3034,20762,17311,14322,
	32581,25752,18990,17007,24974,9141,6437,30169,5796,1467,8574,15058,29166,10372,374,3891,12334,29396,28049,23297,18603,12524,10974,4509,22927,24411,32380,29498,13198,6168,13917,660,18632,21966,12106,736,753,375,31783,4606,17583,32300,4729,13046,6723,10043,8229,23714,23916,29819,28282,24744,20616,
	14556,30322,16044,29949,12098,2613,14275,8407,18836,14303,13866,6067,30223,18819,23864,10971,20193,1648,21905,9394,26611,6579,10653,851,12038,16861,17976,18037,4609,11782,29611,21650,24457,11281,23259,15176,5587,3122,27329,20223,5046,23982,12826,28108,24581,26850,352,27029,31515,2695,26872,23926,28343,
	21556,26541,29284,4107,5668,23901,22288,10255,13882,5618,28430,30235,30786,148,32055,16565,7034,26398,19788,26792,29009,14798,8412,12886,20846,17216,25447,14670,3828,22685,27075,16929,21253,23056,16575,24178,133,6009,20231,5965,1312,28006,20039,4538,15246,11839,24467,24977,17173,11200,16135,32399,
	28752,29868,23210,4010,15152,6848,20632,162,20032,5350,6241,5593,6957,4524,23468,29284,6277,19956,16928,17506,3263,17389,13444,2956,2684,17986,23332,11790,524,23441,23415,20374,3124,28190,6400,7850,21038,9161,32114,3134,14066,29245,3095,8582,9652,17259,17522,26633,10670,15927,6180,6135,13087,1904,30732,
	188,11668,3846,15538,24533,19302,15735,28134,6626,10884,5515,11684,2557,13938,7745,19003,23371,27538,10505,15278,8400,24483,18483,4187,8072,13191,2472,3290,32435,21065,18904,808,21104,8542,13043,9477,13453,1579,15452,21914,24478,25800,15963,15967,76,31748,28178,11068,12528,17065,21938,29167,21345,
	10753,7406,26797,15625,27032,13744,12300,26943,14404,16651,21536,9681,5731,16498,2276,28127,3428,26407,1500,26352,2185,8181,17657,13375,10986,6946,10429,5206,18110,30880,19871,31966,22998,25219,2737,10422,13162,11192,25984,19522,10008,18163,32060,25606,28970,10729,12569,20851,12312,28864,1524,14848,
	5965,21955,3898,23677,16174,20827,24326,20644,13913,30266,16777,25842,14378,24026,18351,3765,11396,14630,25855,8293,21710,22903,9412,14903,19003,17857,14954,10480,12623,12303,28970,9975,18079,24364,16106,13231,10456,24739,32350,29955,1026,5866,5236,22339,518,30683,1263,24366,9326,3939,14929,25168,
	27501,6782,1279,6542,28191,20067,5536,16895,18449,8187,30406,16381,4,8088,18896,30844,19438,15588,19215,21659,22082,1816,24871,9081,26737,15726,15288,20042,7857,17368,17726,4778,2301,20466,27702,14128,23901,25141,1923,28231,8039,24430,23055,23353,24838,24175,31157,28045,122,32261,7519,1683,1952,22314,
	5739,7485,4212,24443,31060,21552,21204,20460,14734,13851,16263,25530,15537,3144,19581,929,10458,881,22104,12624,29262,4820,15148,18202,27745,22921,4739,24558,24983,26132,9893,31625,30472,7223,4886,13034,24329,11530,11359,4358,7944,21837,5393,25534,27832,22012,9224,6414,26223,23332,32749,31879,10956,
	17654,5118,26879,5020,1817,16914,17031,6142,4677,30167,19613,6598,31758,32095,12451,8736,22781,19163,18576,20854,31973,934,486,1683,5492,133,27876,264,21257,9005,19452,718,5061,9477,14215,13614,17637,17198,10680,21726,28239,27585,1742,26989,7274,20567,30094,3040,7219,463,7153,158,15758,31051,5146,
	10377,4057,12924,11658,3438,19655,15136,20119,3487,25964,23496,2586,27358,26004,15839,15721,16509,8537,13032,19077,9412,24821,263,17044,31123,32468,22723,5265,12360,11246,22538,5186,1251,20051,15989,28010,29801,11783,14030,22337,29318,25617,22992,7201,8821,16335,20013,18818,5925,5772,10710,7208,24212,
	12628,30838,31899,23679,19719,2879,8152,14398,24749,30186,8262,25066,7689,23801,8939,29376,24689,31040,23776,27850,32221,29859,3330,7612,11837,1057,15851,10524,32016,25362,25633,32165,31026,5036,11404,14830,5877,2252,3886,17479,30836,7412,31246,6627,4132,31375,10357,6461,20908,22909,31325,19380,25847,
	13771,24615,29304,3975,25538,11916,23210,18444,9508,28374,15551,10293,9138,32592,11046,12486,29937,6139,21546,5099,2862,1922,6937,31179,14272,15472,19622,29537,8845,28321,29324,3975,23248,31990,2676,18004,25881,21325,9241,11944,27285,27825,10922,12805,28047,17869,23920,12961,10039,21415,15280,22457,
	29346,21131,26579,29735,26899,324,17860,15159,4985,7315,22682,14263,21816,11993,9079,14669,29740,2071,4527,11278,25067,29208,10797,3659,10827,29933,4627,30894,11045,16282,8865,27782,31064,2319,5720,23648,5904,32090,4447,8919,24392,2842,2341,23469,19085,9527,0
};

int main()
{

	RBTree r;
	std::map<int, int> rmap;

	srand((unsigned)time(0));

	for (int i = 1; i <= test_number; ++i)
	{
		arr[i - 1] = rand();
		r.Insert(arr[i - 1]);
		rmap.insert(std::make_pair(arr[i - 1], arr[i - 1]));
	}

	printf("[height] £º %d\n", r.Height());
	printf("size : %d\n", r.Size());
	printf("size : %d\n", rmap.size());

	int val = -9965;
	RBTreeNode* node = r.find(val);
	if (node && node->Key == val)
		printf("founded \n");

	bool bPrintTestData = false;
	int nTestPoint = test_number;
	int nMiss = 0;
	for (int i = test_number; i >= 1; --i)
	{

#if 1
		if (!r.find(arr[i - 1]))
		{
			nMiss++;
			continue;
		}

#endif

		r.Remove(arr[i - 1]);
#if 0

		if (r.Height() > log2f(i) * 2)
		{
			printf("error height");
			bPrintTestData = true;
			nTestPoint = i;
			break;
		}

#endif

#if 0
		if (!r.IsInvalid())
		{
			printf("error IsInvalid");
			bPrintTestData = true;
			nTestPoint = i;
			break;
		}
#endif

#if 1
		if (r.find(arr[i - 1]))
		{
			printf("error find1");
			bPrintTestData = true;
			nTestPoint = i;
			break;
		}

#endif
		if (i%100 == 0)
			printf("deleting...[%d]:\n", i);
	}

	if (bPrintTestData)
	{
		for (int j = 0; j < test_number; ++j)
		{
			printf("%d,", arr[j]);
			if (j % 10 == 0)
				printf("\n");
		}
		printf("\n %d : error ", nTestPoint);
		
	}

	printf("\n %d : miss ", nMiss);
	printf("\n[height] £º %d\n", r.Height());


    return 0;
}

